- Annotations
  - @Repository - A Repository is essentially a facade for persistence that uses Collection style semantics (Add, Update, Remove) to supply access to data/objects. 
    It is a way of decoupling the way you store data/objects from the rest of the application.
  - @Service - A service supplies coordination or other "services" that are required to operate your application. They are very different in that Services don't typically
    know how to access data from persistence, and repositories typically only access data/objects for any services you may have.
  - ```@Controller``` - Used in Spring MVC to return a View ( HTML/CSS ) for an end user to use.
  - ```@RestController``` - Used in REST API to return an XML/JSON response to the end user. It is a combination of @Controller + @ResponseBody
  - @ComponentScan - Simply put - @ComponentScan tells Spring in which packages you have annotated classes which should be managed by Spring. So, for example, if you have a 
    class annotated with @Controller which is in a package which is not scanned by Spring, you will not be able to use it as Spring controller.
  - @Autowired - The instance will be auto-wired ( instantiated by Spring and assigned ) automatically. This is IoC and Dependency Injection framework.
  - @Component - Goes on class level. @Bean goes on method level.
  - @SpringBootApplication - @Configuration, @ComponentScan, and @EnableAutoConfiguration. This is in org.springframework.boot.autoconfigure package.
  - @EnableAutoConfiguration - For example when there is a tomcat-embedded.jar on your classpath you likely need a TomcatEmbeddedServletContainerFactory (unless you have defined your own EmbeddedServletContainerFactory bean).
    @EnableAutoConfiguration has a exclude attribute to disable an auto-configuration explicitly otherwise we can simply exclude it from the pom.xml, 
    for example if we donot want Spring to configure the tomcat then exclude spring-bootstarter-tomcat from spring-boot-starter-web.
  - @Configuration
  - @Bean - In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.
    A bean is an object that is instantiated, assembled, and managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application.
    Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.

- What is the Bean Lifecycle

- What is Dispatcher Servlet
  - In SpringMVC, this is the servlet that receives Http requests and delegates it & sends the response back.
  - 

- How to change the port in SpringBoot application
  - ```server.port=9091``` in application.properties file.
  - ```management.server.port=9090``` is used for configuring Actuator on a different port.

- Configuring the web server type
  - The dependency spring-boot-starter-web adds Tomcat to the SpringBoot application.
  - Excluding this and adding the dependency spring-boot-starter-web-jetty adds jetty instead.

- How to access key-value content in application.properties incode
  - ```@Value("${server.port}")```
    ```private String serverPort;```

- What are Spring Profiles?
  - Profiles help in managing different configurations for different environments. Ex: H2 database in DEV and AWS RDS in Production etc.
  - application-prd.properties / application-tst.properties etc for each of the environments.
  - And in main application.properties, all we do is add an entry like this ```spring-profiles-active=dev```. This determines the active profile that is to be used.

- What is Spring IOC?
  - Spring IOC Container is at the core of Spring Framework.
  - Containers will create objects, wire them together, configure them, manage their lifecycle from creation till destruction.

- What is Spring Actuator?
  - Additional feature that helps us to monitor and manage application.
  - Includes features like Auditing, Health and Metrics gathering.
  - This feature can be enabled by adding the dependency spring-boot-starter-actuator.
  - http://localhost:8080/actuator/health
  - http://localhost:8080/actuator/beans


